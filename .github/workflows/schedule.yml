name: Tweet Scheduler (duygu)

on:
  schedule:
    - cron: '*/5 * * * *'   # Her 5 dakikada bir (UTC)
  workflow_dispatch:
    inputs:
      force_now:
        description: "Hemen gönder (1 = evet, 0 = hayır)"
        required: false
        default: "0"

jobs:
  tweet:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      # --- SELF-TEST: Yalnızca manuel tetikte Grok üretimini sınar ---
      - name: Grok self-test (generate only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          python - <<'PY'
          import os, requests, datetime
          key   = os.environ["XAI_API_KEY"]
          model = os.environ.get("X_MODEL","grok-code-fast-1")
          now   = datetime.datetime.utcnow() + datetime.timedelta(hours=3)  # TRT
          sys_prompt = (
              "Sen deneyimli bir sosyal medya yazarı ve şairsin. "
              "Türkçe yaz. Tek cümlelik, duygu yüklü, özgün bir söz yaz. "
              "İçinde duygu, derinlik ve vuruculuk olsun. "
              "En fazla 280 karakter kullan. "
              "Emoji, hashtag veya alıntı işareti KULLANMA."
          )
          user_prompt = (
              f"Tarih: {now.strftime('%d.%m.%Y')}, Saat: {now.strftime('%H:%M')}.\n"
              "Bana tek cümlelik, duygu yüklü bir söz üret."
          )
          payload = {
              "model": model,
              "messages": [
                  {"role":"system","content": sys_prompt},
                  {"role":"user","content":  user_prompt}
              ],
              "temperature": 0.9,
              "max_tokens": 400
          }
          r = requests.post(
              "https://api.x.ai/v1/chat/completions",
              headers={"Authorization": f"Bearer {key}", "Content-Type":"application/json"},
              json=payload, timeout=30
          )
          print("SELFTEST_HTTP:", r.status_code)
          print("SELFTEST_BODY:", r.text[:500])
          if r.ok:
              try:
                  text = r.json()["choices"][0]["message"]["content"].strip()
                  print("SELFTEST_OK:", text)
              except Exception as e:
                  print("SELFTEST_PARSE_ERR:", e)
          PY
        env:
          XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
          X_MODEL: ${{ secrets.X_MODEL }}

      # --- Asıl çalışma: dispatcher zamanlamaya göre üret + paylaş ---
      - name: Run dispatcher (duygu)
        run: |
          echo "$X_REFRESH_TOKEN" > .x_refresh_token
          python dispatcher_duygu.py
        env:
          XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
          X_MODEL: ${{ secrets.X_MODEL }}
          X_CLIENT_ID: ${{ secrets.X_CLIENT_ID }}
          X_CLIENT_SECRET: ${{ secrets.X_CLIENT_SECRET }}
          X_REDIRECT_URI: ${{ secrets.X_REDIRECT_URI }}
          X_SCOPES: ${{ secrets.X_SCOPES }}
          X_REFRESH_TOKEN: ${{ secrets.X_REFRESH_TOKEN }}
          FORCE_NOW: ${{ inputs.force_now || '0' }}
